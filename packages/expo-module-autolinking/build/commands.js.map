{"version":3,"file":"commands.js","sourceRoot":"","sources":["../src/commands.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAC1B,0DAA+C;AAC/C,sDAA8B;AAE9B,wBAA6F;AAG7F,wBAAwB,CAAC,QAAQ,EAAE,KAAK,EAAC,MAAM,EAAC,EAAE;IAChD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC;AAEH,wBAAwB,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE;IAC5D,MAAM,OAAO,GAAG,MAAM,sBAAmB,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAEpE,IAAI,OAAO,CAAC,IAAI,EAAE;QAChB,MAAM,IAAI,GAAG,eAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC3C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;KAChD;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;KAC1B;AACH,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,oDAAoD,EAAE,KAAK,CAAC,CAAC;AAErF,wBAAwB,CAAC,QAAQ,EAAE,KAAK,EAAC,MAAM,EAAC,EAAE;IAChD,MAAM,IAAI,GAAG,sBAAmB,CAAC,MAAM,CAAC,CAAC;IAEzC,IAAI,IAAI,EAAE;QACR,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACnB;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;KAC9D;AACH,CAAC,CAAC,CAAC;AAEH,mBAAS;KACN,OAAO,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC,OAAO,CAAC;KAChE,WAAW,CAAC,8DAA8D,CAAC;KAC3E,UAAU,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC;AAE5B;;GAEG;AACH,SAAS,wBAAwB,CAC/B,WAAmB,EACnB,EAAoD;IAEpD,OAAO,mBAAS;SACb,OAAO,CAAC,GAAG,WAAW,aAAa,CAAC;SACpC,MAAM,CACL,2BAA2B,EAC3B,0FAA0F,EAC1F,KAAK,CACN;SACA,MAAM,CACL,qCAAqC,EACrC,8CAA8C,EAC9C,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EACnD,IAAI,CACL;SACA,MAAM,CACL,4BAA4B,EAC5B,uDAAuD,EACvD,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EACnD,IAAI,CACL;SACA,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE;QACrC,MAAM,OAAO,GAAkB;YAC7B,WAAW;YACX,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,OAAO,EAAE,OAAO,CAAC,OAAO;SACzB,CAAC;QACF,MAAM,aAAa,GAAG,MAAM,mBAAgB,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAExE,OAAO,MAAM,EAAE,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import chalk from 'chalk';\nimport commander, { Command } from 'commander';\nimport process from 'process';\n\nimport { findModulesAsync, generateLogs, resolveModulesAsync, verifySearchResults } from '.';\nimport { SearchOptions, SearchResults } from './types';\n\nregisterSearchingCommand('search', async search => {\n  console.log(require('util').inspect(search, false, null, true));\n});\n\nregisterSearchingCommand('resolve', async (search, command) => {\n  const modules = await resolveModulesAsync(command.platform, search);\n\n  if (command.json) {\n    const logs = generateLogs(search, modules);\n    console.log(JSON.stringify({ logs, modules }));\n  } else {\n    console.log({ modules });\n  }\n}).option('-j, --json', 'Outputs the results and logs in plain JSON format.', false);\n\nregisterSearchingCommand('verify', async search => {\n  const logs = verifySearchResults(search);\n\n  if (logs) {\n    console.log(logs);\n  } else {\n    console.log(chalk.green('ðŸ’ª Duplicated modules not found.'));\n  }\n});\n\ncommander\n  .version(require('expo-module-autolinking/package.json').version)\n  .description('CLI command that searches for Expo modules to autolink them.')\n  .parseAsync(process.argv);\n\n/**\n * Factory for commands that need to search first and shares the same options.\n */\nfunction registerSearchingCommand(\n  commandName: string,\n  fn: (search: SearchResults, command: Command) => any\n) {\n  return commander\n    .command(`${commandName} [paths...]`)\n    .option(\n      '-p, --platform [platform]',\n      'The platform that the resulted modules must support. Available options: \"ios\", \"android\"',\n      'ios'\n    )\n    .option<string[] | null>(\n      '-i, --ignore-paths [ignorePaths...]',\n      'Paths to ignore when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value),\n      null\n    )\n    .option<string[] | null>(\n      '-e, --exclude [exclude...]',\n      'Package names to exclude when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value),\n      null\n    )\n    .action(async (searchPaths, command) => {\n      const options: SearchOptions = {\n        searchPaths,\n        ignorePaths: command.ignorePaths,\n        exclude: command.exclude,\n      };\n      const searchResults = await findModulesAsync(command.platform, options);\n\n      return await fn(searchResults, command);\n    });\n}\n"]}